spring.application.name=NEW_NEW_MVP

# Supabase API Configuration
supabase.url=https://fqyklholxklhwydksazc.supabase.co
supabase.anon.key=${SUPABASE_ANON_KEY:eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZxeWtsaG9seGtsaHd5ZGtzYXpjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU2OTMwOTcsImV4cCI6MjA3MTI2OTA5N30.eswlOcOidlZ1V9-32Xne9TJFptNhs1s_aYJ_m6mQmps}

# Database Configuration for Supabase PostgreSQL (Direct Connection via Pooler)
spring.datasource.url=jdbc:postgresql://aws-1-us-east-1.pooler.supabase.com:6543/postgres?sslmode=require
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=postgres.fqyklholxklhwydksazc
spring.datasource.password=2455767877_start

# HikariCP Connection Pool Settings (optimized for Supabase)
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.connection-timeout=30000

# JPA Configuration for PostgreSQL
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Enable JPA auto-configuration
# spring.autoconfigure.exclude=

# Repository Configuration
app.repository.type=jpa

# Google OAuth2 Configuration (через n8n webhook)
# Старые настройки закомментированы, теперь авторизация идёт через n8n
# spring.security.oauth2.client.registration.google.client-id=340752343067-79ipapn7o97qd8ibqvgpjg4687fm7jo7.apps.googleusercontent.com
# spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:}
# spring.security.oauth2.client.registration.google.scope=openid,profile,email
# spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/api/auth/google/callback
# spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code

# Google OAuth2 Provider Configuration (закомментировано)
# spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
# spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
# spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
# spring.security.oauth2.client.provider.google.user-name-attribute=sub

# SQL Scripts (disabled - using Supabase API)
spring.sql.init.mode=never

# JWT Configuration
jwt.secret=mySecretKeyForJWTTokenGenerationThatIsLongEnoughFor256Bits
jwt.expiration=86400000

# Mail Configuration
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${MAIL_USERNAME:your-email@gmail.com}
spring.mail.password=${MAIL_PASSWORD:your-app-password}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Email Auth Configuration
app.email.from=${MAIL_USERNAME:your-email@gmail.com}
app.email.subject=Код подтверждения - Evalyze

# File Upload Configuration
app.upload.path=${UPLOAD_PATH:./uploads}
app.upload.max-size=52428800
app.upload.allowed-types=image/*,application/pdf,text/*,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document

# Spring multipart file upload settings
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=100MB

# Server Configuration
server.port=8089

# CORS Configuration
spring.web.cors.allowed-origins=*
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
